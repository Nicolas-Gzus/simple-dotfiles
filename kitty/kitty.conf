# vim:fileencoding=utf-8:foldmethod=marker

# fonts {{{

font_family SpaceMono Nerd Font Mono
font_size 11

# see https://www.reddit.com/r/KittyTerminal/comments/r5hssh/comment/hmnbxon/?utm_source=share&utm_medium=web2x&context=3
# see https://github.com/be5invis/Iosevka/issues/248
# see https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points

# Seti-UI + Custom
symbol_map U+E5FA-U+E62B Symbols Nerd Font
# Devicons
symbol_map U+E700-U+E7C5 Symbols Nerd Font
# Font Awesome
symbol_map U+F000-U+F2E0 Symbols Nerd Font
# Font Awesome Extension
symbol_map U+E200-U+E2A9 Symbols Nerd Font
# Material Design Icons
symbol_map U+F500-U+FD46 Symbols Nerd Font
# Weather
symbol_map U+E300-U+E3EB Symbols Nerd Font
# Octicons
symbol_map U+F400-U+F4A8,U+2665,U+26A1,U+F27C Symbols Nerd Font
# Powerline Extra Symbols
symbol_map U+E0A3,U+E0B4-U+E0C8,U+E0CC-U+E0D2,U+E0D4 Symbols Nerd Font
# IEC Power Symbols
symbol_map U+23FB-U+23FE,U+2b58 Symbols Nerd Font
# Font Logos
symbol_map U+F300-U+F313 Symbols Nerd Font
# Pomicons
symbol_map U+E000-U+E00D Symbols Nerd Font

symbol_map U+f101-U+f208 nonicon

adjust_line_height 0
adjust_column_width 0

#: }}}

# performance {{{

input_delay 2
repaint_delay 16

# }}}

# window layout {{{

enabled_layouts splits:split_axis=horizontal

window_resize_step_cells 20
window_resize_step_lines 20

window_border_width 1pt

window_margin_width 1

window_padding_width 0

active_border_color #689d6a

inactive_border_color #ebdbb2

inactive_text_alpha 0.75

# }}}

# tab bar {{{

tab_bar_margin_height 1 0.0

tab_bar_style powerline

tab_bar_min_tabs 1

tab_powerline_style round

tab_title_template "[{index}] {title}"

# }}}

# color scheme {{{

background_opacity 0.8

# }}}

#: Scrolling {{{

#: Scroll line up

# map kitty_mod+up    scroll_line_up
# map kitty_mod+k     scroll_line_up
# map opt+cmd+page_up scroll_line_up
# map cmd+up          scroll_line_up

#: Scroll line down

map kitty_mod+u    scroll_line_down
map kitty_mod+i    scroll_line_up

map kitty_mod+y scroll_page_down
map kitty_mod+o scroll_page_up

#: }}}

#: Window management {{{

#: New window

map ctrl+alt+1 goto_tab 1
map ctrl+alt+2 goto_tab 2
map ctrl+alt+3 goto_tab 3
map ctrl+alt+4 goto_tab 4
map ctrl+alt+5 goto_tab 5
map ctrl+alt+6 goto_tab 6
map ctrl+alt+7 goto_tab 7
map ctrl+alt+8 goto_tab 8
map ctrl+alt+9 goto_tab 9
map ctrl+alt+0 goto_tab 10

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

#: Next layout

# map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout

#: There is also a toggle layout function that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

#: Increase font size

# map kitty_mod+equal  change_font_size all +2.0
# map kitty_mod+plus   change_font_size all +2.0
# map kitty_mod+kp_add change_font_size all +2.0
# map cmd+plus         change_font_size all +2.0
# map cmd+equal        change_font_size all +2.0
# map shift+cmd+equal  change_font_size all +2.0

#: Decrease font size

# map kitty_mod+minus       change_font_size all -2.0
# map kitty_mod+kp_subtract change_font_size all -2.0
# map cmd+minus             change_font_size all -2.0
# map shift+cmd+minus       change_font_size all -2.0

#: Reset font size

# map kitty_mod+backspace change_font_size all 0
# map cmd+0               change_font_size all 0


#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open URL

# map kitty_mod+e open_url_with_hints

#::  Open a currently visible URL using the keyboard. The program used
#::  to open the URL is specified in open_url_with.

#: Insert selected path

# map kitty_mod+p>f kitten hints --type path --program -

#::  Select a path/filename and insert it into the terminal. Useful,
#::  for instance to run git commands on a filename output from a
#::  previous git command.

#: Open selected path

# map kitty_mod+p>shift+f kitten hints --type path

#::  Select a path/filename and open it with the default open program.

#: Insert selected line

# map kitty_mod+p>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Use for
#::  the output of things like: ls -1

#: Insert selected word

# map kitty_mod+p>w kitten hints --type word --program -

#::  Select words and insert into terminal.

#: Insert selected hash

# map kitty_mod+p>h kitten hints --type hash --program -

#::  Select something that looks like a hash and insert it into the
#::  terminal. Useful with git, which uses sha1 hashes to identify
#::  commits

#: Open the selected file at the selected line

# map kitty_mod+p>n kitten hints --type linenum

#::  Select something that looks like filename:linenum and open it in
#::  vim at the specified line number.

#: Open the selected hyperlink

# map kitty_mod+p>y kitten hints --type hyperlink

#::  Select a hyperlink (i.e. a URL that has been marked as such by
#::  the terminal program, for example, by ls --hyperlink=auto).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

#: Toggle fullscreen

# map kitty_mod+f11 toggle_fullscreen
# map ctrl+cmd+f    toggle_fullscreen

#: Toggle maximized

# map kitty_mod+f10 toggle_maximized

#: Toggle macOS secure keyboard entry

# map opt+cmd+s toggle_macos_secure_keyboard_entry

#: Unicode input

# map kitty_mod+u    kitten unicode_input
# map ctrl+cmd+space kitten unicode_input

#: Edit config file

# map kitty_mod+f2 edit_config_file
# map cmd+,        edit_config_file

#: Open the kitty command shell

# map kitty_mod+escape kitty_shell window

#::  Open the kitty shell in a new window/tab/overlay/os_window to
#::  control kitty using commands.

#: Increase background opacity

# map kitty_mod+a>m set_background_opacity +0.1

#: Decrease background opacity

# map kitty_mod+a>l set_background_opacity -0.1

#: Make background fully opaque

# map kitty_mod+a>1 set_background_opacity 1

#: Reset background opacity

# map kitty_mod+a>d set_background_opacity default

#: Reset the terminal

# map kitty_mod+delete clear_terminal reset active
# map opt+cmd+r        clear_terminal reset active

#::  You can create shortcuts to clear/reset the terminal. For
#::  example::

#::      # Reset the terminal
#::      map kitty_mod+f9 clear_terminal reset active
#::      # Clear the terminal screen by erasing all contents
#::      map kitty_mod+f10 clear_terminal clear active
#::      # Clear the terminal scrollback by erasing it
#::      map kitty_mod+f11 clear_terminal scrollback active
#::      # Scroll the contents of the screen into the scrollback
#::      map kitty_mod+f12 clear_terminal scroll active

#::  If you want to operate on all windows instead of just the current
#::  one, use all instead of active.

#::  It is also possible to remap Ctrl+L to both scroll the current
#::  screen contents into the scrollback buffer and clear the screen,
#::  instead of just clearing the screen, for example, for ZSH add the
#::  following to ~/.zshrc:

#::  .. code-block:: sh

#::      scroll-and-clear-screen() {
#::          printf '\n%.0s' {1..$LINES}
#::          zle clear-screen
#::      }
#::      zle -N scroll-and-clear-screen
#::      bindkey '^l' scroll-and-clear-screen

#: Clear up to cursor line

# map cmd+k clear_terminal to_cursor active

#: Reload kitty.conf

# map kitty_mod+f5 load_config_file
# map ctrl+cmd+,   load_config_file
#

#::  Reload kitty.conf, applying any changes since the last time it
#::  was loaded. Note that a handful of settings cannot be dynamically
#::  changed and require a full restart of kitty.  You can also map a
#::  keybinding to load a different config file, for example::

#::      map f5 load_config /path/to/alternative/kitty.conf

#::  Note that all setting from the original kitty.conf are discarded,
#::  in other words the new conf settings *replace* the old ones.

#: Debug kitty configuration

# map kitty_mod+f6 debug_config
# map opt+cmd+,    debug_config

#::  Show details about exactly what configuration kitty is running
#::  with and its host environment. Useful for debugging issues.

#: Send arbitrary text on key presses

#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the ctrl+alt+a key
#::  combination.  The text to be sent is a python string literal so
#::  you can use escapes like \x1b to send control codes or \u21fb to
#::  send unicode characters (or you can just input the unicode
#::  characters directly as UTF-8 text). The first argument to
#::  send_text is the keyboard modes in which to activate the
#::  shortcut. The possible values are normal or application or kitty
#::  or a comma separated combination of them.  The special keyword
#::  all means all modes. The modes normal and application refer to
#::  the DECCKM cursor key mode for terminals, and kitty refers to the
#::  special kitty extended keyboard protocol.

#::  Another example, that outputs a word and then moves the cursor to
#::  the start of the line (same as pressing the Home key)::

#::      map ctrl+alt+a send_text normal Word\x1b[H
#::      map ctrl+alt+a send_text application Word\x1bOH

#: }}}

#: }}}

# Switch focus to the neighboring window in the indicated direction
map kitty_mod+h neighboring_window left
map kitty_mod+j neighboring_window down
map kitty_mod+k neighboring_window up
map kitty_mod+l neighboring_window right

map alt+ctrl+shift+h move_window left
map alt+ctrl+shift+j move_window down
map alt+ctrl+shift+k move_window up
map alt+ctrl+shift+l move_window right

# Create a new window splitting the space used by the existing one so that
# the two windows are placed one above the other
map ctrl+alt+h launch --location=hsplit

# Create a new window splitting the space used by the existing one so that
# the two windows are placed side by side
map ctrl+alt+v launch --location=vsplit

include theme.conf

